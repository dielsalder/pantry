// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Collection {
    id     String @id @unique @default(uuid())
    name   String
    items  Item[]
    User   User   @relation(fields: [userId], references: [id])
    userId String
}

model FoodGroup {
    id     String            @id
    name   String
    icon   FoodGroupIconType
    color  String
    User   User?             @relation(fields: [userId], references: [id])
    userId String?
    Items  Item[]
}

enum FoodGroupIconType {
    Bread
    Carrot
    Cheese
    Egg
    Meat
    Apple
    Soup
    Bottle
}

model FoodPrep {
    id     String  @id
    name   String
    Item   Item[]
    User   User?   @relation(fields: [userId], references: [id])
    userId String?

    @@map("FoodStage")
}

model Item {
    id           Int         @id @default(autoincrement())
    name         String
    quantity     Int?
    unit         String?
    foodGroups   FoodGroup[]
    foodStage    FoodPrep?   @relation(fields: [foodStageId], references: [id])
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
    collection   Collection  @relation(fields: [collectionId], references: [id])
    collectionId String
    User         User?       @relation(fields: [userId], references: [id])
    userId       String?
    foodStageId  String?
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    collections   Collection[]
    items         Item[]
    foodGroups    FoodGroup[]
    foodPreps     FoodPrep[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
